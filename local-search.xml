<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/10/23/ubuntu%E9%83%A8%E7%BD%B2-OverLeaf/"/>
    <url>/2023/10/23/ubuntu%E9%83%A8%E7%BD%B2-OverLeaf/</url>
    
    <content type="html"><![CDATA[<hr><p>title: ubuntu部署 OverLeaf<br>published: true<br>categories:</p><ul><li>学习<br>tags:</li><li>ubuntu</li><li>overleaf</li><li>latex<br>date: 2023-10-23 20:35:33<br>index_img: <a href="https://www.researchstash.com/wp-content/uploads/2018/01/Overleaf.jpg">https://www.researchstash.com/wp-content/uploads/2018/01/Overleaf.jpg</a><h1 id="ubuntu上部署OverLeaf平台"><a href="#ubuntu上部署OverLeaf平台" class="headerlink" title="ubuntu上部署OverLeaf平台"></a>ubuntu上部署OverLeaf平台</h1></li></ul><h2 id="1-准备好docker和-docker-compose-环境"><a href="#1-准备好docker和-docker-compose-环境" class="headerlink" title="1.准备好docker和 docker-compose 环境"></a>1.准备好docker和 docker-compose 环境</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">输入命令查看docker的版本<br>docker <span class="hljs-comment">--version</span><br>docker-compose <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><h2 id="2-部署overleaf"><a href="#2-部署overleaf" class="headerlink" title="2.部署overleaf"></a>2.部署overleaf</h2><h3 id="2-1安装overleaf-的开源版本sharedlatex"><a href="#2-1安装overleaf-的开源版本sharedlatex" class="headerlink" title="2.1安装overleaf 的开源版本sharedlatex"></a>2.1安装overleaf 的开源版本sharedlatex</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull sharelatex/sharelatex:<span class="hljs-number">4</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="2-2下载docker-composed文件"><a href="#2-2下载docker-composed文件" class="headerlink" title="2.2下载docker-composed文件"></a>2.2下载docker-composed文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/overleaf/</span>overleaf<span class="hljs-regexp">/blob/m</span>ain/docker-compose.yml<br></code></pre></td></tr></table></figure><h3 id="2-3针对4-1-1版本的调整"><a href="#2-3针对4-1-1版本的调整" class="headerlink" title="2.3针对4.1.1版本的调整"></a>2.3针对4.1.1版本的调整</h3><p>如果不做修改，会导致mongo和sharelatex启动不起来，出现以下类似问题：<br>（1）dependency failed to start: container for service “mongo” is unhealthy<br>（2）MongoServerError: Transaction numbers are only allowed on a replica set member or mongos</p><h4 id="2-3-1将image-sharelatex-x2F-sharelatex的版本修改为："><a href="#2-3-1将image-sharelatex-x2F-sharelatex的版本修改为：" class="headerlink" title="2.3.1将image: sharelatex&#x2F;sharelatex的版本修改为："></a>2.3.1将image: sharelatex&#x2F;sharelatex的版本修改为：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs \">image: sharelatex/sharelatex:4.1.1<br></code></pre></td></tr></table></figure><h4 id="2-3-2将mongo部分的配置修改成如下所示："><a href="#2-3-2将mongo部分的配置修改成如下所示：" class="headerlink" title="2.3.2将mongo部分的配置修改成如下所示："></a>2.3.2将mongo部分的配置修改成如下所示：</h4><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">mongo</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">always</span><br>     <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mongo:4.4</span><br>     <span class="hljs-attribute">container_name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mongo</span><br>     <span class="hljs-attribute">command</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;--replSet overleaf&quot;</span><br>     <span class="hljs-attribute">expose</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">27017</span><br>     <span class="hljs-attribute">volumes</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;./mongo_data:/data/db&quot;</span><br>     <span class="hljs-attribute">healthcheck</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-attribute">test</span><span class="hljs-punctuation">:</span> <span class="hljs-string">echo &#x27;db.stats().ok&#x27; | mongo localhost:27017/test --quiet</span><br>       <span class="hljs-attribute">interval</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10s</span><br>       <span class="hljs-attribute">timeout</span><span class="hljs-punctuation">:</span> <span class="hljs-string">10s</span><br>       <span class="hljs-attribute">retries</span><span class="hljs-punctuation">:</span> <span class="hljs-string">5</span><br><br> <span class="hljs-attribute">mongoinit</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-attribute">image</span><span class="hljs-punctuation">:</span> <span class="hljs-string">mongo:4.4</span><br>     <span class="hljs-comment"># this container will exit after executing the command</span><br>     <span class="hljs-attribute">restart</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;no&quot;</span><br>     <span class="hljs-attribute">depends_on</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-attribute">mongo</span><span class="hljs-punctuation">:</span><br>         <span class="hljs-attribute">condition</span><span class="hljs-punctuation">:</span> <span class="hljs-string">service_healthy</span><br>     <span class="hljs-attribute">entrypoint</span><span class="hljs-punctuation">:</span><br>       [<br>         &quot;mongo&quot;,<br>         &quot;--host&quot;,<br>         &quot;mongo:27017&quot;,<br>         <span class="hljs-attribute">&quot;--eval&quot;,</span><br><span class="hljs-attribute">         &#x27;rs.initiate(&#123; _id</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;overleaf&quot;, members: [ &#123; _id: 0, host: &quot;mongo:27017&quot; &#125; ] &#125;)&#x27;,</span><br>       ]<br></code></pre></td></tr></table></figure><h4 id="2-3-4命令行进入docker-compose-yml-文件所在目录下，然后执行："><a href="#2-3-4命令行进入docker-compose-yml-文件所在目录下，然后执行：" class="headerlink" title="2.3.4命令行进入docker-compose.yml 文件所在目录下，然后执行："></a>2.3.4命令行进入docker-compose.yml 文件所在目录下，然后执行：</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">docker-compose <span class="hljs-keyword">up</span><br>可以使用docker-compose <span class="hljs-keyword">up</span> -d 来后台运行<br></code></pre></td></tr></table></figure><h4 id="2-3-5通过访问-http-yourip-80-launchpad-就可以配置管理员账号"><a href="#2-3-5通过访问-http-yourip-80-launchpad-就可以配置管理员账号" class="headerlink" title="2.3.5通过访问 http://yourip:80/launchpad 就可以配置管理员账号"></a>2.3.5通过访问 <a href="http://yourip/launchpad">http://yourip:80/launchpad</a> 就可以配置管理员账号</h4><h2 id="3-继续安装"><a href="#3-继续安装" class="headerlink" title="3.继续安装"></a>3.继续安装</h2><p>官方的镜像为了节省带宽，镜像中未含完整版本的TeXLive。需要继续安装完整版本的TeXLive</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk">**进入到容器sharelatex的命令行界面：**<br>docker exec -it sharelatex bash <br><br>进入到sharelatex容器的文件夹<br>cd <span class="hljs-regexp">/usr/</span>local/texlive<br><br>下载更新文件<br>wget http:<span class="hljs-regexp">//mi</span>rror.ctan.org<span class="hljs-regexp">/systems/</span>texlive<span class="hljs-regexp">/tlnet/u</span>pdate-tlmgr-latest.sh --no-check-certificate<br><br>执行更新操作<br>sh update-tlmgr-latest.sh -- --upgrade<br><br><br>配置国内源<br>tlmgr option repository https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/CTAN/</span>systems<span class="hljs-regexp">/texlive/</span>tlnet/<br><br>执行更新操作<br>tlmgr update --self --all <span class="hljs-comment"># luaotfload-tool -fu</span><br><br>执行安装操作<br>tlmgr install scheme-full<br><br></code></pre></td></tr></table></figure><h2 id="4-开放端口"><a href="#4-开放端口" class="headerlink" title="4.开放端口"></a>4.开放端口</h2><p>如果遇到端口无法访问的问题，可以使用iptable来配置开放端口(重启之后会失效)</p><figure class="highlight tp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tp">iptables -<span class="hljs-keyword">P</span> INPUT <span class="hljs-keyword">ACC</span>EPT<br>iptables -<span class="hljs-keyword">P</span> FORWARD <span class="hljs-keyword">ACC</span>CEPT<br>iptables -<span class="hljs-keyword">P</span> OUTPUT <span class="hljs-keyword">ACC</span>EPT<br>iptables -F<br>iptables --save<br></code></pre></td></tr></table></figure><h2 id="5-参考资料"><a href="#5-参考资料" class="headerlink" title="5.参考资料"></a>5.参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/656444021">保姆教程—在本地部署Overleaf - 知乎 (zhihu.com)</a></p><p><a href="https://yxnchen.github.io/technique/Docker%E9%83%A8%E7%BD%B2ShareLaTeX%E5%B9%B6%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE%E4%B8%AD%E6%96%87%E7%8E%AF%E5%A2%83/#%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">Docker部署ShareLaTeX并简单配置中文环境 | YXN’s Blog (yxnchen.github.io)</a></p><p><a href="https://zhuanlan.zhihu.com/p/150827584">Overleaf-在线Latex编辑器部署 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/wangzhaoyoung/article/details/108678355">Ubuntu开启所有端口_王昭阳的博客-CSDN博客</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>服务器一些命令</title>
    <link href="/2023/05/30/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/05/30/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="服务器有关知识"><a href="#服务器有关知识" class="headerlink" title="服务器有关知识"></a>服务器有关知识</h1><h2 id="ubuntu安装分区"><a href="#ubuntu安装分区" class="headerlink" title="ubuntu安装分区"></a>ubuntu安装分区</h2><p><a href="https://www.cnblogs.com/niko-s/articles/13663334.html">https://www.cnblogs.com/niko-s/articles/13663334.html</a></p><p>设置从uefi启动，最后安装也是从uefi启动，安装过程可选为无线、图形硬件选择~~~</p><p>这样进去之后就有图形界面了，而不是黑屏还要进tty</p><h2 id="ubuntu安装之后"><a href="#ubuntu安装之后" class="headerlink" title="ubuntu安装之后"></a>ubuntu安装之后</h2><ul><li><p>关闭图形界面减少显存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service gdm stop<br></code></pre></td></tr></table></figure></li><li><p>给文件夹赋予权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo chown cz.cz -R cz<br></code></pre></td></tr></table></figure></li><li><p>添加sudo用户：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo usermod -aG sudo cz<br></code></pre></td></tr></table></figure></li><li><p>添加新成员： adduser(更友好) useradd(不友好)</p></li><li><p>关闭密码登录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/ssh/sshd_config <br></code></pre></td></tr></table></figure></li><li><p>秘钥：[(30条消息) Ubuntu 设置远程密钥登录（VsCode远程密钥登录）_Loasn的博客-CSDN博客_ubuntu 密钥登录](<a href="https://blog.csdn.net/snfdess/article/details/122870231#:~:text=Ubuntu">https://blog.csdn.net/snfdess/article/details/122870231#:~:text=Ubuntu</a> 设置远程密钥登录（VsCode远程密钥登录） 1 step.1 生成 SSH 密钥 ssh-keygen,将以下两个选项的注释取消，确保其为生效状态 … 4 step.4 vscode 远程插件设置 ssh-key )</p></li></ul><h2 id="Ubuntu服务器无法使用git-clone"><a href="#Ubuntu服务器无法使用git-clone" class="headerlink" title="Ubuntu服务器无法使用git clone"></a>Ubuntu服务器无法使用git clone</h2><p>首先ping <a href="http://www.github.com/">www.github.com</a></p><p>发现给出的ip ping不通，这时我们需要找到真正对应github.com的ip地址</p><p>查询网站： <a href="https://ipaddress.com/website/github.com">https://ipaddress.com/website/github.com</a> ，观察可不可以ping通</p><p>之后修改&#x2F;etc&#x2F;hosts文件 主动修改域名github.com对应的ip地址，也就是下面这一行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">127.0.0.1localhost<br>127.0.1.1ecnu-MS-7A93<br><br>---------in vim----------<br>140.82.114.4 github.com<br>-------------------------<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">The following lines are desirable <span class="hljs-keyword">for</span> IPv6 capable hosts</span><br>::1     ip6-localhost ip6-loopback<br>fe00::0 ip6-localnet<br>ff00::0 ip6-mcastprefix<br>ff02::1 ip6-allnodes<br>ff02::2 ip6-allrouters<br></code></pre></td></tr></table></figure><p>之后重启网络服务</p><p>​注意18.04和20.04的网络重启操作可能不同，差别体现在networking上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /etc/init.d/networking restart<br></code></pre></td></tr></table></figure><p>之后就可以使用git clone了</p><h2 id="ubuntu远程复制文件夹"><a href="#ubuntu远程复制文件夹" class="headerlink" title="ubuntu远程复制文件夹"></a>ubuntu远程复制文件夹</h2><p>1.从本地复制到远程<br>在本地服务器上将&#x2F;root&#x2F;k目录下所有的文件传输到服务器41.224.34.73的&#x2F;home&#x2F;Ik&#x2F;cpfile目录下，命令为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp -r /root/lk root@41.224.34.73:/home/lk/cpfile<br></code></pre></td></tr></table></figure><p>2.从远程复制到本地<br>在本地服务器上操作，将服务器41.224.34.73上&#x2F;home&#x2F;k&#x2F;目录下所有的文件全部复制到本地的&#x2F;root目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp -r root@41.224.34.73:/home/lk /root<br></code></pre></td></tr></table></figure><h2 id="Ubuntu创建短链接"><a href="#Ubuntu创建短链接" class="headerlink" title="Ubuntu创建短链接"></a>Ubuntu创建短链接</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ln -s /data/SYSU-MM01 /dataset<br></code></pre></td></tr></table></figure><p>删除软链接，直接删除软链接就行，注意不要删除错了文件夹：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">rm -rf dataset<br></code></pre></td></tr></table></figure><h2 id="Ubuntu利用跳板机连接内网服务器"><a href="#Ubuntu利用跳板机连接内网服务器" class="headerlink" title="Ubuntu利用跳板机连接内网服务器"></a>Ubuntu利用跳板机连接内网服务器</h2><p>vscode的连接方法（<a href="https://blog.csdn.net/huitailangyz/article/details/106392021">(51条消息) vscode通过跳板机连接远程服务器_vscode 堡垒机_huitailangyz的博客-CSDN博客</a>）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">Host</span> <span class="hljs-string">JumpMachine</span>             <span class="hljs-comment">#跳板机名称</span><br>    <span class="hljs-string">HostName</span> <span class="hljs-string">XXX.XXX.XXX.XXX</span> <span class="hljs-comment">#跳板机IP </span><br>    <span class="hljs-string">Port</span> <span class="hljs-string">XXX</span>                 <span class="hljs-comment">#跳板机ssh端口</span><br>    <span class="hljs-string">User</span> <span class="hljs-string">root</span>                <span class="hljs-comment">#跳板机用户名</span><br><br><span class="hljs-string">Host</span> <span class="hljs-string">TargetMachine</span>           <span class="hljs-comment">#远程服务器名称</span><br>    <span class="hljs-string">HostName</span> <span class="hljs-string">XXX.XXX.XXX.XXX</span> <span class="hljs-comment">#远程服务器IP</span><br>    <span class="hljs-string">Port</span> <span class="hljs-string">XXX</span>                 <span class="hljs-comment">#远程服务器ssh端口</span><br>    <span class="hljs-string">User</span> <span class="hljs-string">root</span>                <span class="hljs-comment">#远程服务器用户名</span><br>    <span class="hljs-string">ProxyCommand</span> <span class="hljs-string">ssh</span> <span class="hljs-string">-W</span> <span class="hljs-string">%h:%p</span> <span class="hljs-string">JumpMachine</span><br></code></pre></td></tr></table></figure><p>终端配置：</p><p>​xshell可以配置local转发，缺点是要一直连接跳板机，mobaxterm更加方便一点</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>命令</tag>
      
      <tag>系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo博客安装配置</title>
    <link href="/2021/01/14/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/01/14/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Hexo博客搭建（ubuntu20-04-Nodejs-Git-SSH-Windows10）"><a href="#Hexo博客搭建（ubuntu20-04-Nodejs-Git-SSH-Windows10）" class="headerlink" title="Hexo博客搭建（ubuntu20.04+Nodejs+Git+SSH+Windows10）"></a>Hexo博客搭建（ubuntu20.04+Nodejs+Git+SSH+Windows10）</h1><p>今天在这里写出Hexo部署在windows上，然后上传到服务器上的一个简易过程，以便以后回过头来看看。</p><h2 id="配置前安装（本地）"><a href="#配置前安装（本地）" class="headerlink" title="配置前安装（本地）"></a>配置前安装（本地）</h2><p>在配置之前，需要安装Nodejs，这个很简单，去官网找一下，下载msi或者zip都可，msi可以直接安装，并且会给你自动配置好环境变量，zip压缩包下载完解压之后，需要配置自己的环境变量。如图：<br><img src="/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="环境变量配置"><br>    还要下载git，这个自行百度，挺简单的（没遇到坑）。<br>    然后就是下载SSH，使用windows自带cmd输入命令ssh root@你的ip地址，如果显示ssh未知命令，记得去下载openssh，并且安装完之后<strong>系统环境变量</strong>Path里有openssh的bin文件夹，没出现的话自行配置。<br/><br>    这里有个地方，如果你打开没有出现列表而是一行，可以在最前面添加<code>%SystemRoot%</code>，这是时候你再打开就会出现表格形式了。</p><h2 id="配置前安装（服务器）"><a href="#配置前安装（服务器）" class="headerlink" title="配置前安装（服务器）"></a>配置前安装（服务器）</h2><p>我的是阿里云ubuntu20.04。</p><p>首先要安装git（用来push本地生成的静态网页）和nginx（用于托管）</p><pre><code class="hljs">    apt-get update    apt-get install git-core nginx</code></pre><h3 id="创建私有仓库"><a href="#创建私有仓库" class="headerlink" title="创建私有仓库"></a>创建私有仓库</h3><p>在服务器&#x2F;var&#x2F;repo&#x2F;下创建一个hexo_static的裸仓库，还要修改权限</p><pre><code class="hljs">sudo mkdir /var/repo/sudo chown -R $USER:$USER /var/repo/sudo chmod -R 755 /var/repo/然后初始化仓库cd /var/repo/git init --bare hexo_static.git初始化之后应该会有一行说明仓库空的提示</code></pre><h3 id="配置nginx静态托管"><a href="#配置nginx静态托管" class="headerlink" title="配置nginx静态托管"></a>配置nginx静态托管</h3><p>创建一个目录，例如&#x2F;var&#x2F;www&#x2F;hexo，这个文件夹用于存放静态文件，然后我们配置nginx访问这个文件夹里的资源</p><pre><code class="hljs">sudo mkdir -p /var/www/hexo#修改目录的所有权和权限sudo chown -R $USER:$USER /var/www/hexosudo chmod -R 755 /var/www/hexo#修改 Nginx 的 default 设置sudo vim /etc/nginx/sites-available/default...server &#123; listen 80 default_server;    listen [::]:80 default_server;    root /var/www/hexo; # 需要修改的部分 index index.html index.htm;...将其中的 root 指令指向 /var/www/hexo 目录，就是让客户端默认访问这里的资源</code></pre><p>只需修改nginx中default的root就行，这样就指定好了<br>修改完之后重启nginx<br>    <code>sudo service nginx restart</code></p><h3 id="创建git钩子"><a href="#创建git钩子" class="headerlink" title="创建git钩子"></a>创建git钩子</h3><p>在服务器上的裸仓库 <code>hexo_static</code> 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 <code>/var/www/hexo</code></p><pre><code class="hljs">#在自动生成的 `hooks` 目录下创建一个新的钩子文件vim /var/repo/hexo_static.git/hooks/post-receive#在此文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等）#!/bin/bashgit --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f#保存退出文件后，需要让该文件变为可执行文件。chmod +x /var/repo/hexo_static.git/hooks/post-receive</code></pre><p>到此服务器端配置结束了。</p><h2 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h2><h3 id="hexo安装"><a href="#hexo安装" class="headerlink" title="hexo安装"></a>hexo安装</h3><p>下载完nodejs和git之后，可以开始安装hexo了。首先创建一个博客文件夹，用cmd或者gitbash进入这个文件夹，输入命令：<code>npm install -g hexo-cli</code>，使用<code>hexo -v</code>可以查看版本</p><p>接下来初始化hexo，<code>hexo init myblog</code>，myblog随便叫什么，这里存放的是自己的博客文件，相当于创建了一个blog项目。</p><pre><code class="hljs">cd myblog //进入myblog这个文件夹npm install //安装hexo配置所需要的完全包（nodejs的一个用法）</code></pre><p>新建完成后，会有以下目录：</p><pre><code class="hljs">·node_modules: 依赖包·public：存放生成的页面·scaffolds：生成文章的一些模板·source：用来存放你的文章·themes：主题·** _config.yml: 博客的配置文件**</code></pre><p>然后输入以下命令：</p><pre><code class="hljs">hexo ghexo server</code></pre><p>命令用法自行搜索，不再讲述</p><p>这样就打开了hexo，浏览器中输入<code>localhost:4000</code>就可以看到生成的博客了 可以使用<code>ctrl+c</code>关闭</p><h3 id="本地git配置"><a href="#本地git配置" class="headerlink" title="本地git配置"></a>本地git配置</h3><p>之所以配置本地Hexo是为了自动部署到服务器端的<code>hexo_static</code>裸仓库中，<code>_config.yml</code> 为 Hexo 的主配置文件。首先需要修改的便是博客的<code>URL</code>地址,在<code>_config.yml</code>文件中</p><pre><code class="hljs"># URL## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;url: http://server-ip # 没有绑定域名时填写服务器的实际 IP 地址。root: /permalink: :year/:month/:day/:title/permalink_defaults:</code></pre><p>然后修改Deployment部分</p><pre><code class="hljs">deploy:type: gitrepo: root@云服务器的IP地址:/var/repo/hexo_staticbranch: master</code></pre><p>这里的root是服务器的名称，由于阿里云是root，腾讯云可能是ubuntu，可能出现差异</p><p>到这步就结束了，下面就是把本地生成的文件git到服务器上</p><pre><code class="hljs">hexo g &amp;&amp; d</code></pre><p><code>hexo g</code>是生成静态文件 <code>hexo d</code>是<code>deployment</code></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>可能会遇到说username和password的问题，我们需要配置git才能使用</p><p>命令行输入以下代码</p><pre><code class="hljs">git config --global user.name &quot;yourname&quot;git config --global user.email &quot;youremail&quot;</code></pre><p><code>yourname</code>和<code>youremail</code>是自己随便写的，相当于注册了以下<br>如果还不行，删除根目录下的文件夹：<code>.deploy_git</code>，重新deploy一下</p><p>前提是ssh配置成功的情况</p><p>还有可能会遇到</p><p><img src="/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/error.png"></p><p>这是由于第一次使用ssh会认证然后这个信息会储存在客户端的<code>known_host</code>中，我们要删除这个配置信息重新连接</p><p>输入：</p><pre><code class="hljs">ssh-keygen -R 服务器端的ip地址</code></pre><p>然后再次</p><pre><code class="hljs">hexo g &amp;&amp; hexo d</code></pre><p>如果显示这样，说明部署成功</p><p><img src="/hexo%E5%8D%9A%E5%AE%A2%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/success.png"></p><h2 id="几个坑"><a href="#几个坑" class="headerlink" title="几个坑"></a>几个坑</h2><pre><code class="hljs">·阿里云记得去阿里云网站找安全组把该开放的端口比如22，80给打开·hexo 在生成静态文件之前最好hexo clean一下，这样清除缓存可以减少一些错误</code></pre><p>随笔简写，仅代表个人配置，如有错误，欢迎指出!</p><p>​    </p><p>​        </p><p>​    </p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>hexo</tag>
      
      <tag>fluid主题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hexo再搭建体验</title>
    <link href="/2021/01/13/hexo%E5%86%8D%E6%90%AD%E5%BB%BA%E4%BD%93%E9%AA%8C/"/>
    <url>/2021/01/13/hexo%E5%86%8D%E6%90%AD%E5%BB%BA%E4%BD%93%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="Hexo搭建过程感受"><a href="#Hexo搭建过程感受" class="headerlink" title="Hexo搭建过程感受"></a>Hexo搭建过程感受</h2><pre><code class="hljs">自从去年玩过hexo之后再也没有搭建过了我是真的好久没玩了今天重置了服务器，bug弄得我快崩溃了mmp垃圾</code></pre><p><img src="/hexo%E5%86%8D%E6%90%AD%E5%BB%BA%E4%BD%93%E9%AA%8C/haojiahuo.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
    <tags>
      
      <tag>博客</tag>
      
      <tag>Hexo</tag>
      
      <tag>感受</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
